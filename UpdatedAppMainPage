//
//  MainView.swift
//  SafeGuard
//
//  Created by C A.V on 2/3/24.
//
import SwiftUI
import MapKit

struct Location: Identifiable {
    var id = UUID()
    var name: String
    var coordinate: CLLocationCoordinate2D
}

struct MainView: View {
    @State private var searchText: String = ""
    @State private var searchResults: [MKMapItem] = []
    @State private var selectedLocation: Location?
    @State private var mapCoordinate: CLLocationCoordinate2D?

    var body: some View {
        ZStack {
            Color(.white)
                .edgesIgnoringSafeArea(.all)

            VStack {
                TextField("Search", text: $searchText)
                    .padding()
                    .background(Color.white)
                    .cornerRadius(10)
                    .padding(.horizontal)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .onChange(of: searchText, perform: { _ in
                        updateSearchResults()
                    })

                // List of search results
                if !searchResults.isEmpty {
                    List(searchResults, id: \.self) { result in
                        Button(action: {
                            selectLocation(result)
                        }) {
                            Text(result.name ?? "Unknown")
                                .padding(.vertical, 5)
                                .padding(.horizontal)
                        }
                    }
                    .padding(.horizontal)
                }

                // Map View
                MapView(coordinate: mapCoordinate)
                    .frame(height: 400) // Adjust the height as needed
                    .padding()

                Spacer()
            }
            .padding()
        }
    }

    private func updateSearchResults() {
        if searchText.isEmpty {
            // Clear the search results when the text is empty
            searchResults = []
        } else {
            // Perform the search
            performSearch()
        }
    }

    private func performSearch() {
        let request = MKLocalSearch.Request()
        request.naturalLanguageQuery = searchText

        let search = MKLocalSearch(request: request)
        search.start { response, error in
            if let items = response?.mapItems {
                searchResults = items
                if let firstResult = items.first {
                    selectLocation(firstResult)
                }
            }
        }
    }

    private func selectLocation(_ mapItem: MKMapItem) {
        selectedLocation = Location(name: mapItem.name ?? "Unknown", coordinate: mapItem.placemark.coordinate)
        mapCoordinate = mapItem.placemark.coordinate
    }
}

struct MapView: UIViewRepresentable {
    var coordinate: CLLocationCoordinate2D?

    func makeUIView(context: Context) -> MKMapView {
        MKMapView()
    }

    func updateUIView(_ uiView: MKMapView, context: Context) {
        uiView.removeAnnotations(uiView.annotations)

        if let coordinate = coordinate {
            let annotation = MKPointAnnotation()
            annotation.coordinate = coordinate
            uiView.addAnnotation(annotation)

            let region = MKCoordinateRegion(center: coordinate, span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05))
            uiView.setRegion(region, animated: true)
        }
    }
}

struct MainView_Previews: PreviewProvider {
    static var previews: some View {
        MainView()
    }
}
